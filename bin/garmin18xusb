#! /usr/bin/env ruby

# Starts the gpsbabel real-time tracking process for the GPS device
# and posts each reading to the tracking server.
# 
# Based on  
# http://stackoverflow.com/questions/1154846/continuously-read-from-stdout-of-external-process-in-ruby

# gpsbabel V 1.3 or greater must be installed

require 'pty'
require 'net/http'
require 'time'
require 'json'

def log_entry entry
  log_file = File.new( @log_file_name, 'a' )
  log_file.puts "#{Time.now.utc} #{entry}"
  log_file.close
end

def update( data, uri )
  begin
    req = Net::HTTP::Post.new(uri.path, initheader = {'Content-Type' =>'application/json'} )
    #req.set_form_data( data )
    req.body = data
    res = Net::HTTP.start(uri.hostname, uri.port) do |http|
      http.request(req)
    end
    result = "#{res.code} #{res.message} #{uri.to_s}"
  rescue Errno::ECONNREFUSED
    result = "Server not available: #{uri.to_s}"
  rescue
    result = "Bad request #{uri.to_s} #{data}"
  end
end

def loc_str_to_json( loc_str )
  # "Tue Oct 15 19:06:14 2013 41.889395N  87.578110W  316.035217"
  temp = loc_str.split( " " )
  time = Time.parse( loc_str )
  temp = loc_str.split( " " )
  lat = temp[5][0..temp[5].length-2].to_f * ( temp[5].end_with?('N') ? 1 : -1 )
  puts "lat: #{temp[5]} : #{lat.to_s}"
  lon = temp[6][0..temp[6].length-2].to_f * ( temp[6].end_with?('E') ? 1 : -1 )
  alt = temp[7].to_f
  { :time => time, :lat => lat, :alt => alt, :lon => lon, 
    :id_source => @id_source, :ident => @ident }.to_json  
end

@serv_uri = ARGV[0] # host uri, e.g., http://localhost:3000
@id_source = ARGV[1] # location_device id
@ident = ARGV[2] # ChaseVehicle ident
@log_file_name = "log/garmin18xusb.log"
@cmd = "gpsbabel -T -i garmin,get_posn -f usb:"

unless @serv_uri && @id_source && @ident
  log_entry( "ERROR: Must have three arguments.")
  puts "ERROR: garmin18xusb driver not started. Requires three arguments " +
       "ARGS: #{ARGV}"
  exit
end

last_log_entry = ""
log_entry( "---------------")
log_entry( "---------------")
log_entry( "Started #{@cmd} on device id:#{@id_source} to server #{@serv_uri}")

num_lines = 2 # Number of lines per position report
num_reports = 10 # just post every nth report
report = ""
reports = 0

Signal.trap( "TERM" ) do
  log_entry( "garmin18xusb terminated by SIGTERM")
  exit
end

begin
  PTY.spawn( @cmd ) do |stdin, stdout, pid|
    count = 0
    report = ""
    begin
      stdin.each do |line|
        line.delete!("\r\n")
        puts ("line:#{line}")
        report += line
        if count == num_lines - 1 
          if reports == num_reports - 1
            log_entry( report )
            uri = URI( "#{@serv_uri}/points" )
            form_data = loc_str_to_json( report )
            result = update( form_data, uri )
            log_entry( result ) unless result == last_log_entry
            last_log_entry = result
            reports = 0
          else
            reports += 1
          end
          report = ""
          count = 0
        else
          count += 1
        end
      end
    rescue Errno::EIO
      log_entry "EIO error: #{( report == "" ) ? "#{@cmd} terminated" : report}"
    end
  end
rescue Errno::ENOENT
  log_entry "ENOENT error: Command not found: #{@cmd} #{("-" + report unless report == "")}"
rescue PTY::ChildExited
  log_entry "#{@cmd} process died unexpectedly!"
end
